struct msgbuf{
        long tipo_mensaje;
        char texto;
};


int main(int argc,char **argv){

    char linea[30];
    int i=0, mqid = msgget(0xa,0);
    struct msgbuf mensaje;
    strcpy(linea,"Hola amigos\0");
    do{
       mensaje.tipo_mensaje=1;
       mensaje.texto = linea[i];
       msgsnd(mqid,&mensaje,1,0);
    }while(linea[i++] != '\0');
    exit(0);
}


int main(int argc, char **argv){
    struct msgbuf mensaje;
    mqid = msgget(0xa,0);
    msgrcv(mqid,&mensaje,1,0,0);
    while(mensaje.texto != '\0'){
        printf(mensaje.texto);
        msgrcv(mqid,&mensaje,1,0,0);
    }
    exit(0);
}

--------------------------------------------------
shm y system V

int main(){
    int shmid = shmget(0xa,1,IPC_CREAT|IPC_EXCL|0600);
    int semid = semget(0xa,4,IPC_CREAT|IPC_EXCL|0777);
    semctl(semid,0,SETVAL,1);
    semctl(semid,1,SETVAL,1);
    semctl(semid,2,SETVAL,0);
    semctl(semid,3,SETVAL,0);
}

shm y posix (raro que lo tome)

int main(){
    sem_t * semA;
	sem_t * semB;
	sem_t * semC;
	sem_t * semX;
    int shmid = shmget(0xa,1,IPC_CREAT|IPC_EXCL|0600);
    int semA = sem_open("/semA",IPC_CREAT|IPC_EXCL,0666,1);
    int semB = sem_open("/semB,IPC_CREAT|IPC_EXCL,0666,1);
    int semC = sem_open("/semC,IPC_CREAT|IPC_EXCL,0600,0);
    int semX = sem_open("/semX,IPC_CREAT|IPC_EXCL,0600,0);
}


shm y systemV en procesos

int semid = semget(0xa,0) para tener el semid y despues hacer operaciones P y V para jugar con el semaforo
int shmid = shmget(0xa,0,0);

para atachear memoria compartida tenemos que hacer un juego con casteos y punteros.

Â¿Como? -> asi : conviene definir la variable afuera del attachment, osea si tenemos memoria comparitda
char, decimos 
char *[nombre de mi variable];
int *[nombre de mi variable];

luego hacemos el casteo:

nombre_de_mi_variable = (char *) shmat(shmid,0,0);
nombre_de_mi_variable = (int *) shmat(shmid,0,0);

despues si queremos hacer algo con la variable tenemos que tratarla como puntero (*variable)++ por ejemplo.

shm y posix

tenemos que repetir lo de shm para systemV pero con la salvedad que los semaforos en posix tienen sus propios
handlers.

para poder trabajar con un semaforo posix tenemos que definir nuestro sem_t * semaforo
y despues llamar a semaforo = sem_open("/nombredelsemaforo",0);
ahi ya podemos usarlo con los comandos sem_wait(semaforo) y sem_post(semaforo).
---------------------------------------------------------------------------------------------------------------
FIFOS- por ultimo los fifos son como los pipes pero nombrados, es decir que tienen un identificador de pipeline
y pueden ser utilizados para comunicar multiples procesos. las llamadas read y write son bloqueantes. Un fifo 
permite comunicacion fullduplex.

inicializacion: mkfifo("nombre",modo) donde modo es O_CREAT|0777

luego el fifo se abre como fd = open("nombre",modoApertura) donde fd viene de FileDescriptor y modoApertura 
puede ser O_WRONLY o O_RDONLY.

si queremos escribir en el fifo hacemos write(fd,loquesea,strlen(loquesea)+1);

si queremos leer del fifo hacemos read(fd,adondeloponemos,255) donde 255 es un largo arbitrario.

por ultimo cerramos close(fd).


